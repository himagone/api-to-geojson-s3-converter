service: api-to-geojson-s3-converter

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  environment:
    EXTERNAL_API_URL: ${file(./config/${self:provider.stage}.json):EXTERNAL_API_URL}
    FIWARE_SERVICE: ${file(./config/${self:provider.stage}.json):FIWARE_SERVICE}
    API_KEY: ${file(./config/${self:provider.stage}.json):API_KEY}
    S3_BUCKET: ${file(./config/${self:provider.stage}.json):S3_BUCKET}
    TZ: Asia/Tokyo
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
      Resource:
        - arn:aws:s3:::${file(./config/${self:provider.stage}.json):S3_BUCKET}
        - arn:aws:s3:::${file(./config/${self:provider.stage}.json):S3_BUCKET}/*

functions:
  callExternalApi:
    handler: src/index.handler
    events:
      - eventBridge:
          schedule: cron(0 3 * * ? *)
          enabled: true
    timeout: 300

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: 'smartcity-yaizu'
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              MaxAge: 3000

    CloudFrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: Default Origin Access Control
          Name: S3OriginAccessControl
          OriginAccessControlOriginType: s3
          SigningBehavior: always
          SigningProtocol: sigv4

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultCacheBehavior:
            ViewerProtocolPolicy: allow-all
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: false
            MinTTL: 0
            DefaultTTL: 1200
            MaxTTL: 3600
            AllowedMethods:
              - GET
              - HEAD
            Compress: true
          Origins:
            - Id: S3Origin
              DomainName:
                Fn::GetAtt: [S3Bucket, DomainName]
              OriginAccessControlId:
                Ref: CloudFrontOriginAccessControl
              S3OriginConfig: {}

    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PolicyForCloudFrontPrivateContent
              Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: S3Bucket
                    - '/*'
              Condition:
                StringEquals:
                  AWS:SourceArn:
                    Fn::Sub: arn:aws:cloudfront::${AWS::AccountId}:origin-access-control/${CloudFrontOriginAccessControl}

  Outputs:
    URL:
      Value:
        Fn::GetAtt: [CloudFrontDistribution, DomainName]
      Description: CloudFront URL
